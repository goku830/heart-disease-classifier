import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.datasets import make_classification
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from imblearn.over_sampling import SMOTE
from sklearn.metrics import accuracy_score, classification_report
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score
from sklearn.linear_model import LogisticRegression
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import f1_score
import xgboost as xgb

file_path = r"C:\Users\brand\Desktop\PyCharm Community Edition 2024.3\Biomarkers\AD_combined_filtered_species.csv"
AD_combined_filtered = pd.read_csv(file_path)

# Display the rows of the dataset
print(AD_combined_filtered.head(30))
print(AD_combined_filtered.columns)
print(AD_combined_filtered['label'].value_counts())

# Define features (X) and target (y)
X = AD_combined_filtered.drop(columns=['label', 'SubjectID','Source'])  # Correct
# Check data types
print(X.dtypes)
y = AD_combined_filtered['label']                # Use 'label' as target

#X, y = make_classification(n_samples= 1000, n_features= 20, n_informative=15,n_redundant=5)
# Split data into train and test sets
X_train, X_test, y_train, y_test = train_test_split(X,y, test_size= 0.2, random_state=42)
# Check shapes
print("X_train shape:", X_train.shape)
print("y_train shape:", y_train.shape)
# Apply SMOTE
smote = SMOTE(random_state=42)
X_train_sm, y_train_sm = smote.fit_resample(X_train, y_train)

print("After SMOTE:", pd.Series(y_train_sm).value_counts())
# Train a RandomForest baseline model
rf_classifier = RandomForestClassifier(random_state=42)
rf_classifier.fit(X_train_sm, y_train_sm)
y_pred = rf_classifier.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print("Classification Report:\n", classifica
